allprojects {
	println 'All projects'
	repositories {
		mavenCentral()
		mavenLocal()
	}

	apply plugin: 'java'
	apply plugin: 'net.saliman.cobertura'
}

buildscript {
    repositories {
        mavenCentral()
		mavenLocal()
    }
	dependencies {
		classpath "de.aaschmid:gradle-cpd-plugin:1.0"
		classpath "net.saliman:gradle-cobertura-plugin:2.5.1"
	}
}

def subCoberturaFiles = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }
cobertura {
    coverageFormats = [ 'xml' ]
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = subCoberturaFiles
}
test.dependsOn(subprojects.test)


subprojects {	
	sourceCompatibility = '1.7'
	apply plugin: "findbugs"
	apply plugin: "pmd"
	apply plugin: "cpd"
	
	cobertura {
		coverageIgnoreTrivial = false
		coverageFormats = [ 'xml' ]
		coverageReportDir = file("$project.buildDir/reports/cobertura")
	}
	
	
	cpd {
    	toolVersion = '5.4.2'
	}

	cpdCheck {
		ignoreFailures = true
		source = sourceSets.main.allJava
	}

	findbugs {
		sourceSets = [sourceSets.main]
		ignoreFailures = true
    	reportsDir = file("$project.buildDir/reports/findbugs")
	    effort = "min"
	    reportLevel = "high"
	}

	pmd {
		ignoreFailures = true
		sourceSets = [sourceSets.main]
		reportsDir = file("$project.buildDir/reports/pmd")
	}

	test {
		ignoreFailures = true
	}
}

project(':UserCommon') {
	dependencies {
		compile fileTree('../../resources')
		testCompile fileTree('../../resources')
	}

	sourceSets {
		main {
			java {
				srcDir './src'
			}
			
			test.java {
				srcDir './src/test/login'
			}
			resources {
				srcDir './src'
			}
		}	
	}

	task changeHibernateUserCommon  {doLast{
		String ucFile1 = file('src/hibernate2.cfg.xml').getText('UTF-8')
		ucFile1 = ucFile1.replaceAll(System.getProperty('dev_ip'),'localhost')
		file('src/hibernate2.cfg.xml').write(ucFile1, 'UTF-8' )}
	}

	jar {
		println 'inside uc'
		archiveName = "UserCommon.jar"
		version = null
		
		from('./') {
			include '.classpath'
			include 'settings.gradle'
			include '.project'
			include 'build.gradle'
			include '.myhibernatedata'
			include '.gitignore'
		}
	}
	jar.dependsOn(changeHibernateUserCommon)

	task changeHibernateUserCommonForTests {doLast{
		String ucFile2 = file('src/hibernate2.cfg.xml').getText('UTF-8')
		ucFile2 = ucFile2.replaceAll('localhost', System.getProperty('dev_ip'))
		file('src/hibernate2.cfg.xml').write(ucFile2, 'UTF-8' )}
	}
	test.dependsOn(changeHibernateUserCommonForTests)
	
	task cleanExtra(type: Delete) {
		delete './build'
		delete './bin'
	}
	clean.dependsOn(cleanExtra)

	repositories {
		flatDir {
			dirs './lib'
		}
	}
	
	javadoc {
		title = 'UserCommon Javadoc'
		source = sourceSets.main.allJava
		failOnError = false
	}
}	

project (':TaashkingCommon') {
	configurations {
		compile {
		    description = 'compile classpath'
		    transitive = true
		}
		runtime {
		    extendsFrom compile
		}
	}

	configurations.compile {
		description = 'compile classpath'
	}

	dependencies {
		compile fileTree('../../resources')
		testCompile project(':UserCommon')
		compile project(':UserCommon')
	}
		
	task changeHibernateTaashkingCommon  {doLast{
		String tkcFile = file('./src/hibernate.cfg.xml').getText('UTF-8')
		tkcFile = tkcFile.replaceAll(System.getProperty('dev_ip'),'localhost')
		file('./src/hibernate.cfg.xml').write(tkcFile, 'UTF-8' )}
	}

	jar {
		println 'inside tkc'
		archiveName = "TaashKingCommon.jar"
		version = null
		from('./') {
			include '.classpath'
			include '.project'
			include 'build.gradle'
			include 'settings.gradle'
			include '.myhibernatedata'
			include 'hibernate.reveng.xml'
		}
	}
	jar.dependsOn(changeHibernateTaashkingCommon)

	task changeHibernateTaashkingCommonForTests  {doLast{
		String tkcFile2 = file('./src/hibernate.cfg.xml').getText('UTF-8')
		tkcFile2 = tkcFile2.replaceAll('localhost', System.getProperty('dev_ip'))
		file('./src/hibernate.cfg.xml').write(tkcFile2, 'UTF-8' )}
	}
	test.dependsOn(changeHibernateTaashkingCommonForTests)

	sourceSets {
		main {
			java {
				srcDir './src'
			}
			resources {
				srcDir './src'
			}
			
			test.java {
				srcDir './src/test'
			}
		}	
	}

	task cleanExtra(type: Delete) {
		delete './build'
		delete './bin'
	}
	clean.dependsOn(cleanExtra)
	
	javadoc {
		title = 'TaashkingCommon Javadoc'
		source = sourceSets.main.allJava
		failOnError = false
	}
}

project (':Taashking') {
	configurations {
		compile {
		    description = 'compile classpath'
		    transitive = true
		}
		runtime {
		    extendsFrom compile
		}
	}
	configurations.compile {
		description = 'compile classpath'
	}

	dependencies {
		compile fileTree('../../resources')
		compile project(':UserCommon')
		compile project(':TaashkingCommon')
		testCompile project(':UserCommon')
		testCompile project(':TaashkingCommon')
	}

	jar {
		archiveName = "Taashking.jar"
		version = null
		from('./') {
			include '.classpath'
			include '.project'
			include '.reverse.properties'
			include 'abusivewords.csv.txt'
			include 'build.gradle'
			include 'log4j.properties'
			include 'pmon'
			include 'PokerKing.zone.xml'
			include 'readme.txt'
			include 'restrictwords.csv.txt'
			include 'RummyKing.zone.xml'
			include 'settings.gradle'
			include 'taashking.properties'
			include 'uml_taashking.uml'
			include 'uml_taashking.umldi'
		}
	}
	
	sourceSets {
		main {
			java {
				srcDir './src'
			}
			resources {
				srcDir './src'
			}
			
			test.java {
				srcDir './src/poker/junit'
			}
		}	
	}

	task cleanExtra(type: Delete) {
		delete './build'
		delete './bin'
	}
	clean.dependsOn(cleanExtra)
	
	javadoc {
		title = 'Taashking Javadoc'
		source = sourceSets.main.allJava
		failOnError = false
	}
}
