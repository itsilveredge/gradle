allprojects {
	println 'All projects'
	repositories {
		mavenCentral()
		mavenLocal()
	}
	apply plugin: 'java'
	apply plugin: 'eclipse'
}

buildscript {
    repositories {
        mavenCentral()
		mavenLocal()
    }
}

subprojects {	
	sourceCompatibility = '1.7'
	apply plugin: 'findbugs'

	findbugs {
		sourceSets = [sourceSets.main]
		ignoreFailures = true
    	reportsDir = file("$project.buildDir/findbugsReports")
	    effort = "min"
    	showProgress = true
	    reportLevel = "high"
	}
}

println JavaVersion.current()

project(':UserCommon') {
	println "Inside UserCommon"
	dependencies {
		compile fileTree('../../resources')
		testCompile fileTree('../../resources')
	}

	sourceSets {
		main {
			java {
				srcDir './src'
			}
			
			test.java {
				srcDir './src/test/login'
			}
			resources {
				srcDir './src'
			}
			println "Inside sourcesets in UserCommon"
		}	
	}

	task changeHibernateUserCommon {
		println 'Inside changeHibernate in usercommon to reset the url'
		String tkcFile = file('src/hibernate2.cfg.xml').getText('UTF-8')
		tkcFile = tkcFile.replaceAll(System.getProperty('dev_ip'),'localhost')
		file('src/hibernate2.cfg.xml').write(tkcFile, 'UTF-8' )
		println 'UserCommon modified'
	}

	jar {
		archiveName = "UserCommon.jar"
		version = null
		println "Inside jar in UserCommon"
		
		from('./') {
			println 'Inside / in UserCommon'
			include '.classpath'
			include 'settings.gradle'
			include '.project'
			include 'build.gradle'
			include '.myhibernatedata'
			include '.gitignore'
		}
	}
	jar.dependsOn(changeHibernateUserCommon)
	
	task cleanExtra(type: Delete) {
		delete './build'
		delete './bin'
		println 'Deleted build/,bin/,UserCommon.jar'
	}
	clean.dependsOn(cleanExtra)

	task cleanBuild(type: Delete) {
		println "Inside clean build in UserCommon"
	}
	build.dependsOn(cleanBuild)

	repositories {
		flatDir {
			dirs './lib'
		}
	}
	
	tasks.withType(Jar) {
        //destinationDir=file('C:\\SmartFoxServer_2X\\SFS2X\\extensions\\__lib__')
    }
	
	javadoc {
		title = 'UserCommon Javadoc'
		source = sourceSets.main.allJava
		failOnError = false
	}
	
	test {
		// set JVM arguments for the test JVM(s)
		jvmArgs '-XX:-UseSplitVerifier'
	}
}	

project (':TaashkingCommon') {

	println "Inside TaashKingCommon"
	
	configurations {
		compile {
		    description = 'compile classpath'
		    transitive = true
		}
		runtime {
		    extendsFrom compile
		}
	}
	configurations.compile {
		description = 'compile classpath'
	}

	dependencies {
		compile fileTree('../../resources')
		testCompile project(':UserCommon')
		compile project(':UserCommon')
	}
		
	task changeHibernateTaashkingCommon {
		println 'Inside changeHibernate in TaashKingCommon to reset the url'
		String tkcFile = file('./src/hibernate.cfg.xml').getText('UTF-8')
		tkcFile = tkcFile.replaceAll(System.getProperty('dev_ip'),'localhost')
		file('./src/hibernate.cfg.xml').write(tkcFile, 'UTF-8' )
		println 'TaashKingCommon modified'
	}

	jar {
		archiveName = "TaashKingCommon.jar"
		version = null
		println "Inside jar in TaashkingCommon"
		from('./') {
			println 'Inside / in TaashkingCommon'
			include '.classpath'
			include '.project'
			include 'build.gradle'
			include 'settings.gradle'
			include '.myhibernatedata'
			include 'hibernate.reveng.xml'
		}
	}
	jar.dependsOn(changeHibernateTaashkingCommon)

	sourceSets {
		main {
			java {
				srcDir './src'
			}
			resources {
				srcDir './src'
			}
			println "Inside sourcesets in TaashkingCommon"
			
			test.java {
				srcDir './src/test'
			}
		}	
	}

	compileTestJava {
		println 'Inside compileTestJava in TaashkingCommon'
	}

	repositories {
		flatDir {
			dirs './lib'
		}
	}

	task cleanExtra(type: Delete) {
		delete './build'
		delete './bin'
		println 'Deleted build/,bin/,TaashKingCommon.jar'
	}
	clean.dependsOn(cleanExtra)

	task cleanBuild(type: Delete) {
	}
	cleanBuild.dependsOn(cleanExtra)
	build.dependsOn(cleanBuild)
	
	tasks.withType(Jar) {
        //destinationDir=file('C:\\SmartFoxServer_2X\\SFS2X\\extensions\\__lib__')
    }
	
	javadoc {
		title = 'TaashkingCommon Javadoc'
		source = sourceSets.main.allJava
		failOnError = false
	}
	
	test {
		// set JVM arguments for the test JVM(s)
		jvmArgs '-XX:-UseSplitVerifier'
	}
}

project (':Taashking') {

	println "Inside Taashking"
	configurations {
		compile {
		    description = 'compile classpath'
		    transitive = true
		}
		runtime {
		    extendsFrom compile
		}
	}
	configurations.compile {
		description = 'compile classpath'
	}

	dependencies {
		compile fileTree('../../resources')
		compile project(':UserCommon')
		compile project(':TaashkingCommon')
		testCompile project(':UserCommon')
		testCompile project(':TaashkingCommon')
	}
		
	task testTask {
		println 'Inside testTask'
	}

	jar {
		archiveName = "Taashking.jar"
		version = null
		println "Inside jar in Taashking"
		from('./') {
			println 'Inside / in Taashking'
			include '.classpath'
			include '.project'
			include '.reverse.properties'
			include 'abusivewords.csv.txt'
			include 'build.gradle'
			include 'log4j.properties'
			include 'pmon'
			include 'PokerKing.zone.xml'
			include 'readme.txt'
			include 'restrictwords.csv.txt'
			include 'RummyKing.zone.xml'
			include 'settings.gradle'
			include 'taashking.properties'
			include 'uml_taashking.uml'
			include 'uml_taashking.umldi'
		}
	}
	jar.dependsOn(testTask)
	
	sourceSets {
		main {
			java {
				srcDir './src'
			}
			resources {
				srcDir './src'
			}
			println "Inside sourcesets in Taashking"
			
			test.java {
				srcDir './src/poker/junit'
			}
		}	
	}

	repositories {
		flatDir {
			dirs './lib'
		}
	}

	task cleanExtra(type: Delete) {
		delete './build'
		delete './bin'
		println 'Deleted build/,bin/,Taashking.jar'
	}
	clean.dependsOn(cleanExtra)

	task cleanBuild(type: Delete) {
		
	}
	build.dependsOn(cleanBuild)
	
	tasks.withType(Jar) {
        //destinationDir=file('C:\\SmartFoxServer_2X\\SFS2X\\extensions\\MyFirstExtension')
    }
	
	javadoc {
		title = 'Taashking Javadoc'
		source = sourceSets.main.allJava
		failOnError = false
	}
	
	test {
		// set JVM arguments for the test JVM(s)
		jvmArgs '-XX:-UseSplitVerifier'
	}
}
